# Install Electron globally (optional but recommended)
npm install -g electron

# Create a new directory for your Electron app
mkdir music-app
cd music-app

# Initialize a new Node.js project
npm init -y

# Install Electron as a dependency
npm install electron --save-dev
=========================================================================================================================
/music-app
    /css
        styles.css
    /js
        app.js
    /main
        main.js
    index.html
    package.json
==========================================================================================================================
// /main/main.js

const { app, BrowserWindow } = require('electron');
const path = require('path');

function createWindow() {
    const win = new BrowserWindow({
        width: 800,
        height: 600,
        webPreferences: {
            preload: path.join(__dirname, 'preload.js'), // Optional for security, can remove if not using
            contextIsolation: false,
            nodeIntegration: true
        }
    });

    win.loadFile('index.html');
}

app.on('ready', createWindow);

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});
=========================================================================================================================
{
  "name": "music-app",
  "version": "1.0.0",
  "description": "An Electron-based music player app",
  "main": "main/main.js",
  "scripts": {
    "start": "electron ."
  },
  "devDependencies": {
    "electron": "^latest_version"
  }
}
=========================================================================================================================
// /main/preload.js

window.addEventListener('DOMContentLoaded', () => {
    // Example: Expose a version API
    const replaceText = (selector, text) => {
        const element = document.getElementById(selector);
        if (element) element.innerText = text;
    };

    for (const type of ['chrome', 'node', 'electron']) {
        replaceText(`${type}-version`, process.versions[type]);
    }
});
==========================================================================================================================
// /js/app.js

const { dialog } = require('electron').remote;
const fs = require('fs');
const path = require('path');

document.addEventListener('DOMContentLoaded', () => {
    const audioPlayer = document.getElementById('audio-player');
    const audioSource = document.getElementById('audio-source');
    const playPauseButton = document.getElementById('play-pause');
    const prevButton = document.getElementById('prev');
    const nextButton = document.getElementById('next');
    const playlistElement = document.getElementById('playlist');
    const openFolderButton = document.getElementById('open-folder');
    const volumeSlider = document.getElementById('volume');
    const muteUnmuteButton = document.getElementById('mute-unmute');
    const progressSlider = document.getElementById('progress');

    let songs = [];
    let currentSongIndex = 0;

    async function openMusicFolder() {
        const result = await dialog.showOpenDialog({
            properties: ['openDirectory']
        });

        if (result.canceled) return;

        const folderPath = result.filePaths[0];
        const files = fs.readdirSync(folderPath);

        songs = files
            .filter(file => file.endsWith('.mp3'))
            .map(file => ({
                title: file,
                filePath: path.join(folderPath, file)
            }));

        updatePlaylist();
        loadSong(currentSongIndex);
    }

    function loadSong(index) {
        const filePath = songs[index].filePath;
        audioSource.src = filePath;
        audioPlayer.load();
    }

    function playPause() {
        if (audioPlayer.paused) {
            audioPlayer.play();
            playPauseButton.textContent = 'Pause';
        } else {
            audioPlayer.pause();
            playPauseButton.textContent = 'Play';
        }
    }

    function nextSong() {
        currentSongIndex = (currentSongIndex + 1) % songs.length;
        loadSong(currentSongIndex);
        playPause();
    }

    function prevSong() {
        currentSongIndex = (currentSongIndex - 1 + songs.length) % songs.length;
        loadSong(currentSongIndex);
        playPause();
    }

    function updatePlaylist() {
        playlistElement.innerHTML = '';
        songs.forEach((song, index) => {
            const li = document.createElement('li');
            li.textContent = song.title;
            li.addEventListener('click', () => {
                currentSongIndex = index;
                loadSong(currentSongIndex);
                playPause();
            });
            playlistElement.appendChild(li);
        });
    }

    function setVolume() {
        audioPlayer.volume = volumeSlider.value;
    }

    function muteUnmute() {
        if (audioPlayer.muted) {
            audioPlayer.muted = false;
            muteUnmuteButton.textContent = 'Mute';
        } else {
            audioPlayer.muted = true;
            muteUnmuteButton.textContent = 'Unmute';
        }
    }

    function updateProgress() {
        progressSlider.max = audioPlayer.duration;
        progressSlider.value = audioPlayer.currentTime;
    }

    function setProgress() {
        audioPlayer.currentTime = progressSlider.value;
    }

    playPauseButton.addEventListener('click', playPause);
    prevButton.addEventListener('click', prevSong);
    nextButton.addEventListener('click', nextSong);
    openFolderButton.addEventListener('click', openMusicFolder);
    volumeSlider.addEventListener('input', setVolume);
    muteUnmuteButton.addEventListener('click', muteUnmute);
    audioPlayer.addEventListener('timeupdate', updateProgress);
    progressSlider.addEventListener('input', setProgress);

    // Initialize with an empty playlist
    updatePlaylist();
});
